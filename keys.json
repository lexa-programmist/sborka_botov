{
  "local": "<!DOCTYPE html> <html lang=\"ru\"> <head>   <meta charset=\"UTF-8\">   <title>5SIM  </title>   <style>     html, body {       margin: 0;       padding: 0;       height: 100%;       background: #000;       font-family: 'Courier New', monospace;       color: #00e0c6;       overflow: hidden;     }      canvas {       position: fixed;       top: 0;       left: 0;       z-index: 0;       filter: blur(3px) brightness(0.4);     }      .content {       position: relative;       z-index: 1;       padding: 30px;     }      .title {       text-align: center;       font-size: 20px;       margin-bottom: 30px;     }      .panel {       background-color: rgba(20, 20, 20, 0.85);       border: 1px solid #3a3a3a;       border-radius: 12px;       padding: 20px;       max-width: 500px;       margin: 0 auto;       box-shadow: 0 0 20px rgba(0, 255, 204, 0.1);     }      .panel h3 {       color: #00ffc8;       margin-top: 0;     }      .input-group {       margin-bottom: 15px;     }      label {       display: block;       margin-bottom: 5px;       font-size: 14px;     }      input, select {       width: 100%;       padding: 8px;       background: #111;       border: 1px solid #444;       color: #0ff;       border-radius: 6px;     }      button {       background: #00e0c6;       color: #000;       border: none;       padding: 10px 16px;       border-radius: 8px;       font-weight: bold;       font-size: 14px;       cursor: pointer;       transition: background 0.3s;       width: 100%;       margin-top: 10px;     }      button:hover {       background: #00ffc8;     }      button:disabled {       background: #555;       cursor: not-allowed;     }      .result {       margin-top: 20px;       font-size: 14px;       color: #b3fff0;       white-space: pre-wrap;       background: rgba(0, 20, 15, 0.7);       padding: 10px;       border-radius: 6px;       border-left: 3px solid #00e0c6;     }      .status {       margin-top: 10px;       padding: 8px;       border-radius: 6px;       background: rgba(0, 224, 198, 0.1);       border-left: 3px solid #00e0c6;       font-size: 13px;     }      .api-key-form {       margin-bottom: 20px;       padding: 15px;       background: rgba(10, 10, 10, 0.8);       border-radius: 8px;     }      .api-key-form input {       margin-bottom: 10px;     }   </style> </head> <body>  <canvas id=\"matrixCanvas\"></canvas>  <div class=\"content\">   <div class=\"title\"> <br>      5SIM API       <br>    </div>    <div class=\"api-key-form\" id=\"apiKeyForm\">     <h3> API</h3>     <div class=\"input-group\">       <label>API  5sim:</label>       <input type=\"password\" id=\"apiKeyInput\" placeholder=\"  API   5sim.net\">     </div>     <button onclick=\"saveApiKey()\">  </button>   </div>    <div class=\"panel\" id=\"mainPanel\" style=\"display: none;\">     <h3> </h3>      <div class=\"input-group\">       <label>:</label>       <select id=\"country\">         <option value=\"russia\"> </option>         <option value=\"ukraine\"> </option>         <option value=\"kazakhstan\"> </option>         <option value=\"indonesia\"> </option>         <option value=\"brazil\"> </option>       </select>     </div>      <div class=\"input-group\">       <label>:</label>       <select id=\"service\">         <option value=\"telegram\">Telegram</option>         <option value=\"whatsapp\">WhatsApp</option>         <option value=\"avito\">Avito</option>         <option value=\"google\">Google</option>         <option value=\"facebook\">Facebook</option>       </select>     </div>      <button onclick=\"buyNumber()\" id=\"buyBtn\">  </button>     <button onclick=\"getCode()\" id=\"codeBtn\" disabled>  </button>     <button onclick=\"cancelOrder()\" id=\"cancelBtn\" disabled>  </button>     <button onclick=\"getBalance()\">  </button>     <button onclick=\"getOrderInfo()\" id=\"infoBtn\" disabled>   </button>      <div class=\"result\" id=\"result\"></div>     <div class=\"status\" id=\"status\"> API    </div>   </div> </div>  <script>   //     const state = {     apiKey: localStorage.getItem('5sim_api_key') || '',     currentOrder: null,     balance: 0,     prices: {}   };    // DOM    const elements = {     apiKeyForm: document.getElementById('apiKeyForm'),     mainPanel: document.getElementById('mainPanel'),     apiKeyInput: document.getElementById('apiKeyInput'),     result: document.getElementById('result'),     status: document.getElementById('status'),     buyBtn: document.getElementById('buyBtn'),     codeBtn: document.getElementById('codeBtn'),     cancelBtn: document.getElementById('cancelBtn'),     infoBtn: document.getElementById('infoBtn'),     country: document.getElementById('country'),     service: document.getElementById('service')   };    //    function init() {     if (state.apiKey) {       elements.apiKeyInput.value = state.apiKey;       saveApiKey();     }   }    //  API    function saveApiKey() {     state.apiKey = elements.apiKeyInput.value.trim();     if (!state.apiKey) {       showError(' API ');       return;     }          localStorage.setItem('5sim_api_key', state.apiKey);     elements.apiKeyForm.style.display = 'none';     elements.mainPanel.style.display = 'block';     updateStatus('  .  ...');          //         getBalance();   }    //     function updateStatus(message) {     elements.status.textContent = message;   }    //     function showResult(message, isError = false) {     elements.result.innerHTML = message;     elements.result.style.borderLeft = isError ? '3px solid #ff5555' : '3px solid #00e0c6';   }    //     function showError(message) {     showResult(` ${message}`, true);     updateStatus(`: ${message}`);   }    //      function updateButtons() {     elements.codeBtn.disabled = !state.currentOrder;     elements.cancelBtn.disabled = !state.currentOrder;     elements.infoBtn.disabled = !state.currentOrder;   }    //     function formatMoney(amount) {     return amount.toFixed(2) + ' ';   }    //    API 5sim   async function make5simRequest(endpoint, params = {}) {     if (!state.apiKey) {       showError('API   ');       throw new Error('API   ');     }      try {       updateStatus(`  : ${endpoint}...`);              const url = new URL(`https://5sim.net/v1/${endpoint}`);       Object.entries(params).forEach(([key, value]) => {         url.searchParams.append(key, value);       });        const response = await fetch(url, {         headers: {           'Authorization': `Bearer ${state.apiKey}`,           'Accept': 'application/json'         }       });        if (!response.ok) {         throw new Error(`HTTP error! status: ${response.status}`);       }        return await response.json();     } catch (error) {       showError(` API: ${error.message}`);       throw error;     }   }    //     async function buyNumber() {     const country = elements.country.value;     const service = elements.service.value;          try {       const data = await make5simRequest('user/buy/activation/' + country + '/' + service + '/any');              state.currentOrder = {         id: data.id,         phone: data.phone,         operator: data.operator,         product: data.product,         price: data.price,         status: data.status,         expires: data.expires,         sms: null,         createdAt: new Date()       };        showResult(`    !  : ${data.phone}  : ${elements.country.options[elements.country.selectedIndex].text}  : ${elements.service.options[elements.service.selectedIndex].text}  : ${formatMoney(data.price)}   : ${new Date(data.expires * 1000).toLocaleTimeString()}       `);        updateStatus(`  #${data.id}`);       updateButtons();     } catch (error) {       console.error('   :', error);     }   }    //     async function getCode() {     if (!state.currentOrder) {       showError('  ');       return;     }      try {       const data = await make5simRequest('user/check/' + state.currentOrder.id);              if (data.sms && data.sms.length > 0) {         state.currentOrder.sms = data.sms;         const latestSms = data.sms[data.sms.length - 1];                  showResult(`    !  : ${latestSms.sender}  : ${latestSms.text}  : ${new Date(latestSms.created_at * 1000).toLocaleTimeString()}         `);       } else {         showResult('   .  SMS...');       }     } catch (error) {       console.error('   :', error);     }   }    //     async function cancelOrder() {     if (!state.currentOrder) {       showError('  ');       return;     }      try {       const data = await make5simRequest('user/cancel/' + state.currentOrder.id);              if (data.status === 'CANCELED') {         const refundAmount = state.currentOrder.price * 0.8; // 80%          state.balance += refundAmount;                  showResult(`     : ${formatMoney(refundAmount)}   : ${formatMoney(state.balance)}         `);                  state.currentOrder = null;         updateStatus(' ');         updateButtons();       }     } catch (error) {       console.error('   :', error);     }   }    //     async function getBalance() {     try {       const data = await make5simRequest('user/profile');              state.balance = data.balance;       state.prices = data.prices;              showResult(`   : ${formatMoney(data.balance)}   : ${new Date(data.created_at * 1000).toLocaleDateString()}  : ${data.rating}       `);              updateStatus(' ');     } catch (error) {       console.error('   :', error);     }   }    //      async function getOrderInfo() {     if (!state.currentOrder) {       showError('  ');       return;     }      try {       const data = await make5simRequest('user/check/' + state.currentOrder.id);       const duration = Math.floor((new Date() - state.currentOrder.createdAt) / 1000);              showResult(`     #${data.id}  : ${data.phone}  : ${elements.country.options[elements.country.selectedIndex].text}  : ${elements.service.options[elements.service.selectedIndex].text}  : ${formatMoney(data.price)}  : ${duration}   : ${data.status} ${data.sms?.length ? `  SMS: ${data.sms.length}` : '  '}       `);     } catch (error) {       console.error('   :', error);     }   }    // - (  )   const canvas = document.getElementById(\"matrixCanvas\");   const ctx = canvas.getContext(\"2d\");   canvas.height = window.innerHeight;   canvas.width = window.innerWidth;   const letters = \"0123456789\";   const fontSize = 16;   const columns = canvas.width / fontSize;   const drops = Array(Math.floor(columns)).fill(1);    function draw() {     ctx.fillStyle = \"rgba(0, 0, 0, 0.07)\";     ctx.fillRect(0, 0, canvas.width, canvas.height);     ctx.fillStyle = \"#66ffe6\";     ctx.font = fontSize + \"px monospace\";      for (let i = 0; i < drops.length; i++) {       const text = letters.charAt(Math.floor(Math.random() * letters.length));       ctx.fillText(text, i * fontSize, drops[i] * fontSize);        if (drops[i] * fontSize > canvas.height && Math.random() > 0.985) {         drops[i] = 0;       }        drops[i] += 0.4;     }   }    setInterval(draw, 50);   window.addEventListener(\"resize\", () => {     canvas.width = window.innerWidth;     canvas.height = window.innerHeight;   });    //      window.onload = init; </script>  </body> </html>"
}