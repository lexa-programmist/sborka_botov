const API_BASE = 'http://localhost:5000';
const userId = 'local';

// –≠–ª–µ–º–µ–Ω—Ç—ã
const el = {
  apiKeyForm: document.getElementById('apiKeyForm'),
  mainPanel: document.getElementById('mainPanel'),
  apiKeyInput: document.getElementById('apiKeyInput'),
  saveKeyBtn: document.getElementById('saveKeyBtn'),
  result: document.getElementById('result'),
  status: document.getElementById('status'),
  userInfo: document.getElementById('userInfo'),
  initLog: document.getElementById('initLog'),
  actionLog: document.getElementById('actionLog'),
  buyBtn: document.getElementById('buyBtn'),
  codeBtn: document.getElementById('codeBtn'),
  cancelBtn: document.getElementById('cancelBtn'),
  balanceBtn: document.getElementById('balanceBtn'),
  infoBtn: document.getElementById('infoBtn'),
  country: document.getElementById('country'),
  service: document.getElementById('service'),
  quantity: document.getElementById('quantity'),

  // API Key modal
  apiKeyBtn: document.getElementById('apiKeyBtn'),
  apiKeyModal: document.getElementById('apiKeyModal'),
  currentApiKey: document.getElementById('currentApiKey'),
  newApiKeyInput: document.getElementById('newApiKeyInput'),
  updateApiKeyBtn: document.getElementById('updateApiKeyBtn'),
  closeApiKeyModalBtn: document.getElementById('closeApiKeyModalBtn'),
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let state = {
  apiKey: '',
  currentOrders: [],
  balance: 0,
};

// –û—á–∏—Å—Ç–∫–∞ API –∫–ª—é—á–∞ –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ASCII)
function sanitizeApiKey(key) {
  return key.replace(/[^\x20-\x7E]/g, '');
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function addLog(message, target = 'action') {
  const now = new Date();
  const timeStr = now.toLocaleTimeString();
  const entry = document.createElement('div');
  entry.className = 'log-entry';
  entry.innerHTML = `<span class="log-time">[${timeStr}]</span> ${message}`;
  if (target === 'init') {
    el.initLog.appendChild(entry);
    el.initLog.scrollTop = el.initLog.scrollHeight;
  } else {
    el.actionLog.appendChild(entry);
    el.actionLog.scrollTop = el.actionLog.scrollHeight;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(text) {
  el.status.textContent = text;
  addLog(`STATUS: ${text}`);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function showResult(text, isError = false) {
  el.result.textContent = text;
  el.result.style.borderLeft = isError ? '3px solid #ff5555' : '3px solid #00e0c6';
  addLog(`RESULT: ${text.replace(/\n/g, ' ')}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
  const hasOrders = state.currentOrders.length > 0;
  el.codeBtn.disabled = !hasOrders;
  el.cancelBtn.disabled = !hasOrders;
  el.infoBtn.disabled = !hasOrders;

  if (hasOrders) {
    updateStatus(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${state.currentOrders.length}`);
  } else {
    updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
async function apiPost(path, body) {
  if (!state.apiKey) throw new Error('API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  const cleanKey = sanitizeApiKey(state.apiKey);
  const res = await fetch(`${API_BASE}${path}`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${cleanKey}`
    },
    body: JSON.stringify(body)
  });
  if (!res.ok) {
    let errText = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    try {
      const err = await res.json();
      errText = err.error || errText;
    } catch {}
    throw new Error(errText);
  }
  return res.json();
}

async function apiGet(path) {
  if (!state.apiKey) throw new Error('API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  const cleanKey = sanitizeApiKey(state.apiKey);
  const res = await fetch(`${API_BASE}${path}`, {
    headers: {
      'Authorization': `Bearer ${cleanKey}`
    }
  });
  if (!res.ok) {
    let errText = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    try {
      const err = await res.json();
      errText = err.error || errText;
    } catch {}
    throw new Error(errText);
  }
  return res.json();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞
async function saveApiKey() {
  let key = el.apiKeyInput.value.trim();
  key = sanitizeApiKey(key);
  if (!key) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á', true);
    return;
  }
  try {
    await apiPost('/init', { user_id: userId, api_key: key });
    state.apiKey = key;
    localStorage.setItem('5sim_api_key', key);
    el.apiKeyForm.classList.add('hidden');
    el.mainPanel.classList.remove('hidden');
    addLog('API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'init');
    showResult('üîë API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    await getBalance();
    updateUI();
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`, true);
  }
}

// –ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async function buyNumber() {
  const country = el.country.value;
  const service = el.service.value;
  const quantity = parseInt(el.quantity.value, 10);

  if (!country) {
    showResult('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É', true);
    return;
  }
  if (!service) {
    showResult('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', true);
    return;
  }
  if (!quantity || quantity < 1) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º 1)', true);
    return;
  }

  el.buyBtn.disabled = true;
  showResult(`‚åõ –ü–æ–∫—É–ø–∫–∞ ${quantity} –Ω–æ–º–µ—Ä–∞(–æ–≤)...`);
  updateStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');

  try {
    const orders = [];
    for (let i = 0; i < quantity; i++) {
      const res = await fetch(`${API_BASE}/buy`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${state.apiKey}`  // –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
        },
        body: JSON.stringify({ country, service, user_id: userId }),
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏');
      }
      const order = await res.json();
      addLog(`‚úÖ –ù–æ–º–µ—Ä –∫—É–ø–ª–µ–Ω: ${order.phone} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} —Ä—É–±.`);
      orders.push(order);
      await new Promise(r => setTimeout(r, 500));  // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    state.currentOrders = orders;
    showResult(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${orders.length} –Ω–æ–º–µ—Ä(–æ–≤)`);
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${e.message}`, true);
    updateStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ');
  } finally {
    el.buyBtn.disabled = false;
    updateUI();
  }
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ SMS –∫–æ–¥–∞
async function getCode() {
  if (state.currentOrders.length === 0) {
    showResult('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', true);
    return;
  }
  try {
    showResult('‚åõ –û–∂–∏–¥–∞–Ω–∏–µ SMS...');
    updateStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö SMS...');
    const smsList = await apiGet('/code');
    if (smsList.length > 0) {
      const sms = smsList[0];
      showResult(`‚úÖ SMS –ø–æ–ª—É—á–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sms.sender || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n–¢–µ–∫—Å—Ç: ${sms.text || '–ø—É—Å—Ç–æ'}`);
    } else {
      showResult('üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...');
    }
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SMS: ${e.message}`, true);
  }
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async function cancelOrder() {
  if (state.currentOrders.length === 0) {
    showResult('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', true);
    return;
  }
  try {
    showResult('‚åõ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤...');
    updateStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã...');
    const res = await apiPost('/cancel', { user_id: userId });
    showResult(`üö´ –ó–∞–∫–∞–∑(—ã) –æ—Ç–º–µ–Ω–µ–Ω(—ã)\n–í–æ–∑–≤—Ä–∞—Ç: ${res.refund} —Ä—É–±.`);
    state.currentOrders = [];
    updateUI();
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${e.message}`, true);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
async function getBalance() {
  try {
    showResult('‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    updateStatus('–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...');
    const profile = await apiPost('/balance', { user_id: userId });
    state.balance = profile.balance;
    showResult(`üíµ –ë–∞–ª–∞–Ω—Å: ${profile.balance} —Ä—É–±.\n–†–µ–π—Ç–∏–Ω–≥: ${profile.rating}`);
    updateStatus('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: ${e.message}`, true);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async function getOrderInfo() {
  if (state.currentOrders.length === 0) {
    showResult('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
    return;
  }
  try {
    showResult('‚åõ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    updateStatus('–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ...');
    const order = await apiGet('/order');
    showResult(`‚ÑπÔ∏è –ó–∞–∫–∞–∑ #${order.id}\n–ù–æ–º–µ—Ä: ${order.phone}\n–°—Ç–∞—Ç—É—Å: ${order.status}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price}`);
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${e.message}`, true);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω –≤ —Å–µ–ª–µ–∫—Ç
async function loadCountries() {
  try {
    const countriesObj = await apiGet('/countries');
    el.country.innerHTML = '';
    const countries = Object.keys(countriesObj); // –ö–ª—é—á–∏ ‚Äî —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã
    for (const c of countries) {
      const option = document.createElement('option');
      option.value = c;
      option.textContent = c.charAt(0).toUpperCase() + c.slice(1); // –°–¥–µ–ª–∞—Ç—å —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
      el.country.appendChild(option);
    }
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω: ${e.message}`, true);
  }
}



// --- –ú–æ–¥–∞–ª–∫–∞ API –∫–ª—é—á–∞ ---

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
el.apiKeyBtn.addEventListener('click', () => {
  el.currentApiKey.value = state.apiKey || '–ö–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
  el.newApiKeyInput.value = '';
  el.apiKeyModal.classList.remove('hidden');
});

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
el.closeApiKeyModalBtn.addEventListener('click', () => {
  el.apiKeyModal.classList.add('hidden');
});

// –û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á
el.updateApiKeyBtn.addEventListener('click', async () => {
  let newKey = el.newApiKeyInput.value.trim();
  newKey = sanitizeApiKey(newKey);
  if (!newKey) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π API –∫–ª—é—á', true);
    return;
  }
  try {
    await apiPost('/init', { user_id: userId, api_key: newKey });
    state.apiKey = newKey;
    localStorage.setItem('5sim_api_key', newKey);
    showResult('üîë API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    addLog('API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ', 'init');
    el.apiKeyModal.classList.add('hidden');
    await getBalance();
    updateUI();
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: ${e.message}`, true);
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ UI
async function init() {
  const savedKey = localStorage.getItem('5sim_api_key');
  if (savedKey) {
    state.apiKey = savedKey;
    el.apiKeyInput.value = savedKey;
    el.apiKeyForm.classList.add('hidden');
    el.mainPanel.classList.remove('hidden');
    addLog('API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage', 'init');
    await apiPost('/init', { user_id: userId, api_key: savedKey });
    await loadCountries();
    await getBalance();
    updateUI();
  } else {
    el.apiKeyForm.classList.remove('hidden');
    el.mainPanel.classList.add('hidden');
    updateStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
  }
}

document.addEventListener('DOMContentLoaded', init);


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
el.saveKeyBtn.addEventListener('click', saveApiKey);
el.buyBtn.addEventListener('click', buyNumber);
el.codeBtn.addEventListener('click', getCode);
el.cancelBtn.addEventListener('click', cancelOrder);
el.balanceBtn.addEventListener('click', getBalance);
el.infoBtn.addEventListener('click', getOrderInfo);

init();
