const API_BASE = 'http://localhost:5000';
const userId = 'local';

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ window.fetch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
const originalFetch = window.fetch;

window.fetch = async function (...args) {
  const response = await originalFetch(...args);

  const contentType = response.headers.get('content-type');

document.addEventListener('DOMContentLoaded', () => {
  if (window.ethereum) {
    try {
      delete window.ethereum;
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å window.ethereum:', e);
    }
  }
  el.refreshOrdersBtn.addEventListener('click', getOrderInfo);
});

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –æ—Ç–≤–µ—Ç–∞
  if (contentType && !contentType.includes('application/json')) {
    const text = await response.text();
    throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON: ${text.slice(0, 100)}...`);
  }

  return response;
};

// –≠–ª–µ–º–µ–Ω—Ç—ã
const el = {
  apiKeyForm: document.getElementById('apiKeyForm'),
  mainPanel: document.getElementById('mainPanel'),
  apiKeyInput: document.getElementById('apiKeyInput'),
  saveKeyBtn: document.getElementById('saveKeyBtn'),
  result: document.getElementById('result'),
  status: document.getElementById('status'),
  userInfo: document.getElementById('userInfo'),
  initLog: document.getElementById('initLog'),
  actionLog: document.getElementById('actionLog'),
  buyBtn: document.getElementById('buyBtn'),
  codeBtn: document.getElementById('codeBtn'),
  cancelBtn: document.getElementById('cancelBtn'),
  balanceBtn: document.getElementById('balanceBtn'),
  infoBtn: document.getElementById('infoBtn'),
  country: document.getElementById('country'),
  service: document.getElementById('service'),
  quantity: document.getElementById('quantity'),
  refreshOrdersBtn: document.getElementById('refreshOrdersBtn'),

  // API Key modal
  apiKeyBtn: document.getElementById('apiKeyBtn'),
  apiKeyModal: document.getElementById('apiKeyModal'),
  currentApiKey: document.getElementById('currentApiKey'),
  newApiKeyInput: document.getElementById('newApiKeyInput'),
  updateApiKeyBtn: document.getElementById('updateApiKeyBtn'),
  closeApiKeyModalBtn: document.getElementById('closeApiKeyModalBtn'),
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let state = {
  apiKey: '',
  currentOrders: [],
  balance: 0,
  currentOrderId: null,
};

// –û—á–∏—Å—Ç–∫–∞ API –∫–ª—é—á–∞ –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ASCII)
function sanitizeApiKey(key) {
  return key.replace(/[^\x20-\x7E]/g, '');
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function addLog(message, target = 'action') {
  const now = new Date();
  const timeStr = now.toLocaleTimeString();
  const entry = document.createElement('div');
  entry.className = 'log-entry';
  entry.innerHTML = `<span class="log-time">[${timeStr}]</span> ${message}`;
  if (target === 'init') {
    el.initLog.appendChild(entry);
    el.initLog.scrollTop = el.initLog.scrollHeight;
  } else {
    el.actionLog.appendChild(entry);
    el.actionLog.scrollTop = el.actionLog.scrollHeight;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(text) {
  el.status.textContent = text;
  addLog(`STATUS: ${text}`);
}

function updateButtonStates() {
  const hasOrder = !!state.currentOrderId || state.currentOrders.length > 0;
  el.codeBtn.disabled = !hasOrder;
  el.cancelBtn.disabled = !hasOrder;
  el.infoBtn.disabled = !hasOrder;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function showResult(text, isError = false) {
  el.result.textContent = text;
  el.result.style.borderLeft = isError ? '3px solid #ff5555' : '3px solid #00e0c6';
  addLog(`RESULT: ${text.replace(/\n/g, ' ')}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
  const hasOrders = state.currentOrderId || state.currentOrders.length > 0;
  el.codeBtn.disabled = !hasOrders;
  el.cancelBtn.disabled = !hasOrders;
  el.infoBtn.disabled = !hasOrders;

  if (hasOrders) {
    updateStatus(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${state.currentOrders.length || 1}`);
  } else {
    updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
function saveOrdersToStorage() {
  localStorage.setItem('5sim_active_orders', JSON.stringify({
    currentOrderId: state.currentOrderId,
    orders: state.currentOrders,
    lastUpdated: new Date().toISOString()
  }));
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
function loadOrdersFromStorage() {
  const saved = localStorage.getItem('5sim_active_orders');
  if (saved) {
    try {
      const { currentOrderId, orders, lastUpdated } = JSON.parse(saved);
      state.currentOrderId = currentOrderId;
      state.currentOrders = orders || [];
      
      if (currentOrderId || orders?.length) {
        addLog(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders?.length || 1} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`, 'init');
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', e);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
async function apiPost(path, body) {
  try {
    const res = await fetch(`${API_BASE}${path}`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${state.apiKey}`
      },
      body: JSON.stringify(body)
    });

    const text = await res.text();
    console.log('Raw response:', text); // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${text.slice(0, 100)}`);
    }

    try {
      return JSON.parse(text);
    } catch {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ' + text.slice(0, 100));
    }
  } catch (e) {
    console.error('API Error:', { path, error: e.message });
    throw new Error(e.message.includes('JSON') ? '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' : e.message);
  }
}

async function apiGet(path) {
  if (!state.apiKey) throw new Error('API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  const cleanKey = sanitizeApiKey(state.apiKey);
  const res = await fetch(`${API_BASE}${path}`, {
    headers: {
      'Authorization': `Bearer ${cleanKey}`
    }
  });
  if (!res.ok) {
    let errText = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    try {
      const err = await res.json();
      errText = err.error || errText;
    } catch {}
    throw new Error(errText);
  }
  return res.json();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞
async function saveApiKey() {
  let key = el.apiKeyInput.value.trim();
  key = sanitizeApiKey(key);
  if (!key) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á', true);
    return;
  }
  try {
    await apiPost('/init', { user_id: userId, api_key: key });
    state.apiKey = key;
    localStorage.setItem('5sim_api_key', key);
    el.apiKeyForm.classList.add('hidden');
    el.mainPanel.classList.remove('hidden');
    addLog('API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'init');
    showResult('üîë API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    await getBalance();
    updateUI();
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`, true);
  }
}

// –ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async function buyNumber() {
  const country = el.country.value;
  const service = el.service.value;
  const quantity = parseInt(el.quantity.value, 10);

  if (!country) {
    showResult('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É', true);
    return;
  }
  if (!service) {
    showResult('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', true);
    return;
  }
  if (!quantity || quantity < 1) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º 1)', true);
    return;
  }

  el.buyBtn.disabled = true;
  showResult(`‚åõ –ü–æ–∫—É–ø–∫–∞ ${quantity} –Ω–æ–º–µ—Ä–∞(–æ–≤)...`);
  updateStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');

  try {
    const orders = [];
    for (let i = 0; i < quantity; i++) {
      const res = await fetch(`${API_BASE}/buy`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${state.apiKey}`
        },
        body: JSON.stringify({ country, service, user_id: userId }),
      });

      const contentType = res.headers.get('content-type') || '';
      if (!contentType.includes('application/json')) {
        const text = await res.text();
        throw new Error(text.includes('<!DOCTYPE html>') ? '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML-–æ—à–∏–±–∫—É' : text);
      }

      const result = await res.json();
      
      if (result.success) {
        addLog(`‚úÖ –ù–æ–º–µ—Ä –∫—É–ø–ª–µ–Ω: ${result.data.phone} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.data.price} —Ä—É–±.`);
        orders.push(result.data);
        state.currentOrderId = result.data.id; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º result.data
        updateButtonStates();
        await new Promise(r => setTimeout(r, 500));
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏');
      }
    }
    state.currentOrders = orders;
    saveOrdersToStorage();
    await getOrderInfo();
    showResult(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${orders.length} –Ω–æ–º–µ—Ä(–æ–≤)`);
    updateButtonStates(); // –£–±—Ä–∞–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ currentOrderId = data.id
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${e.message}`, true);
    updateStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ');
  } finally {
    el.buyBtn.disabled = false;
    updateUI();
  }
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ SMS –∫–æ–¥–∞
async function getCode() {
  if (state.currentOrders.length === 0) {
    showResult('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', true);
    return;
  }
  try {
    showResult('‚åõ –û–∂–∏–¥–∞–Ω–∏–µ SMS...');
    updateStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö SMS...');
    const smsList = await apiGet('/code');
    if (smsList.length > 0) {
      const sms = smsList[0];
      showResult(`‚úÖ SMS –ø–æ–ª—É—á–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sms.sender || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n–¢–µ–∫—Å—Ç: ${sms.text || '–ø—É—Å—Ç–æ'}`);
    } else {
      showResult('üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...');
    }
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SMS: ${e.message}`, true);
  }
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async function cancelOrder() {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –∑–∞–∫–∞–∑–æ–≤ (—Ç–µ–∫—É—â–∏–π + –∏–∑ —Å–ø–∏—Å–∫–∞)
  const orderIds = [];
  if (state.currentOrderId) orderIds.push(state.currentOrderId);
  state.currentOrders.forEach(order => orderIds.push(order.id));

  if (orderIds.length === 0) {
    showResult('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã', true);
    return;
  }

  try {
    showResult(`‚åõ –û—Ç–º–µ–Ω–∞ ${orderIds.length} –∑–∞–∫–∞–∑–æ–≤...`);
    updateStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞...');

    // –ó–ê–ú–ï–ù–Ø–ï–ú –≠–¢–û–¢ –ë–õ–û–ö:
    const results = [];
    for (const orderId of orderIds) {
      const result = await apiPost('/cancel', {
        order_id: orderId, 
        user_id: userId
      }).catch(e => ({ success: false, error: e.message }));
      results.push(result);
      await new Promise(resolve => setTimeout(resolve, 100)); // 100ms –∑–∞–¥–µ—Ä–∂–∫–∞
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successCount = results.filter(r => r?.success).length;
    const errorCount = results.length - successCount;

    if (errorCount > 0) {
      showResult(`‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ ${successCount}/${orderIds.length} –∑–∞–∫–∞–∑–æ–≤ (${errorCount} –æ—à–∏–±–æ–∫)`, false);
    } else {
      showResult(`‚úÖ –í—Å–µ ${orderIds.length} –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω—ã`);
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.currentOrderId = null;
    state.currentOrders = [];
    await getBalance();
  } catch (e) {
    showResult(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${e.message}`, true);
  } finally {
    updateUI();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
async function getBalance() {
  try {
    showResult('‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    updateStatus('–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...');
    const profile = await apiPost('/balance', { user_id: userId });
    state.balance = profile.balance;
    showResult(`üíµ –ë–∞–ª–∞–Ω—Å: ${profile.balance} —Ä—É–±.\n–†–µ–π—Ç–∏–Ω–≥: ${profile.rating}`);
    updateStatus('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: ${e.message}`, true);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async function getOrderInfo() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const activeOrders = [...state.currentOrders];
  if (state.currentOrderId && !activeOrders.some(o => o.id === state.currentOrderId)) {
    activeOrders.push({ id: state.currentOrderId });
  }

  if (activeOrders.length === 0) {
    showResult('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
    return;
  }

  try {
    showResult('‚åõ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
    updateStatus('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

    let infoText = `‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${activeOrders.length}\n\n`;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    activeOrders.forEach(order => {
      infoText += `–ó–∞–∫–∞–∑ #${order.id}\n`;
      infoText += `–ù–æ–º–µ—Ä: ${order.phone || order.number || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      infoText += `–°—Ç—Ä–∞–Ω–∞: ${order.country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
      infoText += `–°–µ—Ä–≤–∏—Å: ${order.service || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      infoText += `–°—Ç–∞—Ç—É—Å: ${order.status || '–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
      infoText += `–¶–µ–Ω–∞: ${order.price || '0'} —Ä—É–±.\n`;
      
      if (order.sms) {
        infoText += `SMS: ${order.sms.text || order.sms || '–µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'}\n`;
      } else if (order.code) {
        infoText += `–ö–æ–¥: ${order.code}\n`;
      }
      
      infoText += `----------------\n`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const savedData = localStorage.getItem('5sim_active_orders');
    if (savedData) {
      const { lastUpdated } = JSON.parse(savedData);
      infoText += `\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(lastUpdated).toLocaleString()}`;
    }

    showResult(infoText);
    updateStatus('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞:', e);
    showResult('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', true);
    updateStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω –≤ —Å–µ–ª–µ–∫—Ç
async function loadCountries() {
  try {
    const countriesObj = await apiGet('/countries');
    el.country.innerHTML = '';
    const countries = Object.keys(countriesObj); // –ö–ª—é—á–∏ ‚Äî —ç—Ç–æ —Å—Ç—Ä–∞–Ω—ã
    for (const c of countries) {
      const option = document.createElement('option');
      option.value = c;
      option.textContent = c.charAt(0).toUpperCase() + c.slice(1); // –°–¥–µ–ª–∞—Ç—å —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
      el.country.appendChild(option);
    }
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω: ${e.message}`, true);
  }
}



// --- –ú–æ–¥–∞–ª–∫–∞ API –∫–ª—é—á–∞ ---

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
el.apiKeyBtn.addEventListener('click', () => {
  el.currentApiKey.value = state.apiKey || '–ö–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
  el.newApiKeyInput.value = '';
  el.apiKeyModal.classList.remove('hidden');
});

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
el.closeApiKeyModalBtn.addEventListener('click', () => {
  el.apiKeyModal.classList.add('hidden');
});

// –û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á
el.updateApiKeyBtn.addEventListener('click', async () => {
  let newKey = el.newApiKeyInput.value.trim();
  newKey = sanitizeApiKey(newKey);
  if (!newKey) {
    showResult('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π API –∫–ª—é—á', true);
    return;
  }
  try {
    await apiPost('/init', { user_id: userId, api_key: newKey });
    state.apiKey = newKey;
    localStorage.setItem('5sim_api_key', newKey);
    showResult('üîë API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    addLog('API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ', 'init');
    el.apiKeyModal.classList.add('hidden');
    await getBalance();
    updateUI();
  } catch (e) {
    showResult(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: ${e.message}`, true);
  }
});

// ... (–≤–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ verifyActiveOrders)

async function verifyActiveOrders() {
  if (!state.currentOrders.length && !state.currentOrderId) return;
  
  try {
    const validOrders = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
    for (const order of state.currentOrders) {
      const res = await apiPost('/order/status', { 
        order_id: order.id 
      });
      if (res.status !== 'CANCELED') {
        validOrders.push(order);
      }
    }
    
    state.currentOrders = validOrders;
    if (validOrders.length === 0) {
      state.currentOrderId = null;
      localStorage.removeItem('5sim_active_orders');
    } else {
      saveOrdersToStorage();
    }
  } catch (e) {
    console.error('Order verification failed:', e);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ UI
async function init() {
  const savedKey = localStorage.getItem('5sim_api_key');
  if (savedKey) {
    try {
      state.apiKey = savedKey;
      el.apiKeyInput.value = savedKey;
      addLog('API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage', 'init');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ API
      await apiPost('/init', { user_id: userId, api_key: savedKey });
      
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
      el.apiKeyForm.classList.add('hidden');
      el.mainPanel.classList.remove('hidden');
      
      loadOrdersFromStorage();
      await verifyActiveOrders();
      await loadCountries();
      await getBalance();
      updateUI();
      if (state.currentOrders.length > 0 || state.currentOrderId) {
        await getOrderInfo();
      }

    } catch (e) {
      // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞
      showResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞: ${e.message}`, true);
      el.apiKeyForm.classList.remove('hidden');
      el.mainPanel.classList.add('hidden');
      updateStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
      localStorage.removeItem('5sim_api_key');
      state.apiKey = '';
    }
  } else {
    el.apiKeyForm.classList.remove('hidden');
    el.mainPanel.classList.add('hidden');
    updateStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
  // –£–¥–∞–ª–µ–Ω–∏–µ ethereum (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (window.ethereum) {
    try {
      delete window.ethereum;
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å window.ethereum:', e);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  init();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  el.saveKeyBtn.addEventListener('click', saveApiKey);
  el.buyBtn.addEventListener('click', buyNumber);
  el.codeBtn.addEventListener('click', getCode);
  el.cancelBtn.addEventListener('click', cancelOrder);
  el.balanceBtn.addEventListener('click', getBalance);
  el.infoBtn.addEventListener('click', getOrderInfo);
});
